import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler, PolynomialFeatures
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.pipeline import make_pipeline

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="COVID-19 Dashboard", layout="wide")
st.title("ü¶† COVID-19: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏")


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def extract_value(x):
    try:
        clean_str = ''.join(filter(lambda c: c.isdigit() or c == '-', str(x).split("(")[0]))
        return int(clean_str) if clean_str != '' else 0
    except:
        return 0


def extract_change(x):
    try:
        if "(" in str(x):
            change_str = str(x).split("(")[1].strip("+)").replace(",", "")
            return int(change_str) if change_str != '' else 0
        else:
            return 0
    except:
        return 0


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
def format_number(n):
    try:
        n = float(n)
        if abs(n) >= 1e12:
            return f"{n / 1e12:.2f} —Ç—Ä–ª–Ω"
        elif abs(n) >= 1e9:
            return f"{n / 1e9:.2f} –º–ª—Ä–¥"
        elif abs(n) >= 1e6:
            return f"{n / 1e6:.2f} –º–ª–Ω"
        elif abs(n) >= 1e3:
            return f"{n / 1e3:.2f} —Ç—ã—Å"
        elif abs(n) < 0.01 and abs(n) > 0:
            return f"{n:.2e}"
        else:
            return f"{n:,.0f}"
    except:
        return str(n)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è adjusted R¬≤
def adjusted_r2(r2, n, p):
    return 1 - (1 - r2) * (n - 1) / (n - p - 1) if n > p + 1 else r2


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        current_dir = os.path.dirname(os.path.abspath(__file__))
        csv_path = os.path.join(current_dir, "covid.csv")
    except NameError:
        csv_path = "covid.csv"

    if os.path.exists(csv_path):
        df = pd.read_csv(csv_path, encoding="utf-8")
    else:
        st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö 'covid.csv' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {csv_path}")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö")
        uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type="csv")
        if uploaded_file is not None:
            df = pd.read_csv(uploaded_file, encoding="utf-8")
        else:
            df = pd.DataFrame(columns=[
                "–†–µ–≥–∏–æ–Ω –†–æ—Å—Å–∏–∏", "–ó–∞—Ä–∞–∂–µ–Ω–∏–π", "–°–º–µ—Ä—Ç–µ–π", "–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π",
                "–ó–∞—Ä–∞–∂–µ–Ω–æ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç"
            ])
            return df

    df = df.dropna()
    df["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ"] = df["–ó–∞—Ä–∞–∂–µ–Ω–∏–π"].apply(extract_value)
    df["–°–º–µ—Ä—Ç–µ–π_—á–∏—Å–ª–æ"] = df["–°–º–µ—Ä—Ç–µ–π"].apply(extract_value)
    df["–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π_—á–∏—Å–ª–æ"] = df["–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π"].apply(extract_value)
    df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"] = df["–ó–∞—Ä–∞–∂–µ–Ω–æ –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç"].apply(extract_value)
    df["–ò–∑–º–µ–Ω–µ–Ω–∏–µ_–∑–∞—Ä–∞–∂–µ–Ω–∏–π"] = df["–ó–∞—Ä–∞–∂–µ–Ω–∏–π"].apply(extract_change)

    df["–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å"] = df["–°–º–µ—Ä—Ç–µ–π_—á–∏—Å–ª–æ"] / df["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ"].replace(0, 1)
    df["–î–æ–ª—è_–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π"] = df["–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π_—á–∏—Å–ª–æ"] / df["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ"].replace(0, 1)
    df["–î–æ–ª—è_–∞–∫—Ç–∏–≤–Ω—ã—Ö"] = df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"] / df["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ"].replace(0, 1)

    df.replace([np.inf, -np.inf], 0, inplace=True)

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IQR
    Q1 = df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"].quantile(0.25)
    Q3 = df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"].quantile(0.75)
    IQR = Q3 - Q1
    df = df[(df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"] >= Q1 - 1.5 * IQR) & (df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"] <= Q3 + 1.5 * IQR)]

    return df


df = load_data()

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
top_n = st.sidebar.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–ø-—Ä–µ–≥–∏–æ–Ω–æ–≤", min_value=5, max_value=30, value=10)

# --- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---
st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏")
if not df.empty:
    col1, col2, col3, col4 = st.columns(4)
    metrics = {
        "–ó–∞—Ä–∞–∂–µ–Ω–∏–π": df['–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ'].sum(),
        "–°–º–µ—Ä—Ç–µ–π": df['–°–º–µ—Ä—Ç–µ–π_—á–∏—Å–ª–æ'].sum(),
        "–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π": df['–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π_—á–∏—Å–ª–æ'].sum(),
        "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª—É—á–∞–∏": df['–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏'].sum()
    }
    for i, (name, value) in enumerate(metrics.items()):
        with [col1, col2, col3, col4][i]:
            st.metric(f"–í—Å–µ–≥–æ {name.lower()}", format_number(value))

# --- –¢–û–ü –†–µ–≥–∏–æ–Ω—ã ---
if not df.empty and "–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ" in df.columns:
    st.markdown("---")
    st.subheader(f"üìå –¢–æ–ø-{top_n} —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —á–∏—Å–ª—É –∑–∞—Ä–∞–∂–µ–Ω–∏–π")
    top_regions = df.sort_values(by="–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ", ascending=False).head(top_n)
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.barplot(data=top_regions, y="–†–µ–≥–∏–æ–Ω –†–æ—Å—Å–∏–∏", x="–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ", palette="viridis")
    ax.set_xlabel("–ß–∏—Å–ª–æ –∑–∞—Ä–∞–∂–µ–Ω–∏–π")
    ax.set_ylabel("–†–µ–≥–∏–æ–Ω")
    ax.set_title(f"–¢–æ–ø-{top_n} —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—Ä–∞–∂–µ–Ω–∏–π")
    plt.tight_layout()
    st.pyplot(fig)

# --- –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è ---
if not df.empty and '–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏' in df.columns and '–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ' in df.columns:
    st.markdown("---")
    st.subheader("üìâ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    fig, ax = plt.subplots(figsize=(10, 6))
    hue_col = "–î–æ–ª—è_–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π" if "–î–æ–ª—è_–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π" in df.columns else None
    size_col = "–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å" if "–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å" in df.columns else None
    sns.scatterplot(
        data=df,
        x="–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ",
        y="–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏",
        size=size_col,
        hue=hue_col,
        sizes=(20, 200) if size_col else (20, 20),
        alpha=0.7,
        palette="viridis"
    )
    ax.set_title("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞—Ä–∞–∂–µ–Ω–∏–π")
    ax.set_xlabel("–û–±—â–µ–µ —á–∏—Å–ª–æ –∑–∞—Ä–∞–∂–µ–Ω–∏–π")
    ax.set_ylabel("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª—É—á–∞–∏")
    ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    st.pyplot(fig)

# --- –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ ---
if not df.empty and len(df) > 10 and '–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏' in df.columns:
    st.markdown("---")
    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

    numeric_cols = ['–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ', '–°–º–µ—Ä—Ç–µ–π_—á–∏—Å–ª–æ', '–í—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π_—á–∏—Å–ª–æ',
                    '–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏', '–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å', '–î–æ–ª—è_–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π']
    numeric_cols = [col for col in numeric_cols if col in df.columns]

    if len(numeric_cols) > 1:
        corr_matrix = df[numeric_cols].corr()

        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', center=0,
                    vmin=-1, vmax=1, fmt='.2f')
        ax.set_title("–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        plt.tight_layout()
        st.pyplot(fig)

        st.write("–ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π (–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª—É—á–∞–∏):")
        corr_with_target = corr_matrix['–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏'].sort_values(ascending=False)
        for feature, corr_value in corr_with_target.items():
            if feature != '–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏':
                strength = "—Å–∏–ª—å–Ω–∞—è" if abs(corr_value) > 0.7 else "—É–º–µ—Ä–µ–Ω–Ω–∞—è" if abs(corr_value) > 0.3 else "—Å–ª–∞–±–∞—è"
                direction = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è" if corr_value > 0 else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è"
                st.write(f"- {feature}: {corr_value:.3f} ({strength} {direction} –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è)")

# --- –ú–æ–¥–µ–ª—å ML ---
if not df.empty and len(df) > 10 and '–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏' in df.columns:
    st.markdown("---")
    st.subheader("ü§ñ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")

    feature_options = {
        "–¢–æ–ª—å–∫–æ –∑–∞—Ä–∞–∂–µ–Ω–∏—è": ["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ"],
        "–ó–∞—Ä–∞–∂–µ–Ω–∏—è + –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": ["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ", "–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å", "–î–æ–ª—è_–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π"],
        "–í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏": ["–ó–∞—Ä–∞–∂–µ–Ω–∏–π_—á–∏—Å–ª–æ", "–°–º–µ—Ä—Ç–µ–π_—á–∏—Å–ª–æ", "–õ–µ—Ç–∞–ª—å–Ω–æ—Å—Ç—å", "–î–æ–ª—è_–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–π"]
    }

    available_features = {}
    for name, features in feature_options.items():
        existing_features = [f for f in features if f in df.columns]
        if existing_features:
            available_features[name] = existing_features

    if not available_features:
        st.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    else:
        selected_features = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏", list(available_features.keys()))
        features_to_use = available_features[selected_features]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if len(features_to_use) > 1:
            corr_matrix = df[features_to_use].corr()
            to_remove = set()
            for i in range(len(features_to_use)):
                for j in range(i + 1, len(features_to_use)):
                    if abs(corr_matrix.iloc[i, j]) > 0.8:
                        to_remove.add(features_to_use[j])  # –£–¥–∞–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –∏–∑ –ø–∞—Ä—ã
            features_to_use = [f for f in features_to_use if f not in to_remove]
            if len(features_to_use) == 0:
                features_to_use = [available_features[selected_features][0]]  # –û—Å—Ç–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫
                st.warning("–í—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏. –û—Å—Ç–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫.")

        model_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å",
                                  ["–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è",
                                   "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (—Å—Ç–µ–ø–µ–Ω—å 2)",
                                   "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å",
                                   "SVR"])

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        X = df[features_to_use]
        y = df["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"]

        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        y = np.log1p(y)  # log1p = log(1 + y) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω—É–ª–µ–π

        data_clean = pd.concat([X, y], axis=1).dropna()
        if len(data_clean) < 10:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
        else:
            X = data_clean[features_to_use]
            y = data_clean["–ê–∫—Ç–∏–≤–Ω—ã–µ_—Å–ª—É—á–∞–∏"]

            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            if model_type == "–õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è":
                model = make_pipeline(StandardScaler(), LinearRegression())
            elif model_type == "–ü–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è (—Å—Ç–µ–ø–µ–Ω—å 2)":
                model = make_pipeline(
                    StandardScaler(),
                    PolynomialFeatures(degree=2),
                    LinearRegression()
                )
            elif model_type == "–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å":
                model = make_pipeline(StandardScaler(), RandomForestRegressor(random_state=42))
                param_grid = {
                    'randomforestregressor__n_estimators': [50, 100, 200],
                    'randomforestregressor__max_depth': [3, 5, 10]
                }
                model = GridSearchCV(model, param_grid, cv=5, scoring='r2')
            else:  # SVR
                model = make_pipeline(StandardScaler(), SVR(kernel='rbf'))
                param_grid = {
                    'svr__C': [1, 10, 100],
                    'svr__gamma': ['scale', 'auto', 0.1]
                }
                model = GridSearchCV(model, param_grid, cv=5, scoring='r2')

            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            # –û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
            y_test = np.expm1(y_test)
            y_pred = np.expm1(y_pred)

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            mse = mean_squared_error(y_test, y_pred)
            r2 = r2_score(y_test, y_pred)
            mae = mean_absolute_error(y_test, y_pred)
            rmse = np.sqrt(mse)
            adj_r2 = adjusted_r2(r2, len(y_test), len(features_to_use))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ R¬≤
            if r2 > 0.999:
                st.warning("R¬≤ –±–ª–∏–∑–æ–∫ –∫ 1, –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            elif r2 < 0:
                st.warning(
                    "R¬≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –º–æ–¥–µ–ª—å —Ö—É–∂–µ, —á–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–ª–∏ –º–æ–¥–µ–ª—å.")

            st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
            metrics_data = {
                "–ú–µ—Ç—Ä–∏–∫–∞": ["MSE (–°—Ä–µ–¥–Ω–µ–∫–≤. –æ—à–∏–±–∫–∞)", "RMSE (–ö–æ—Ä–µ–Ω—å –∏–∑ MSE)",
                            "MAE (–°—Ä. –∞–±—Å. –æ—à–∏–±–∫–∞)", "R¬≤ (–î–æ–ª—è –æ–±—ä—è—Å–Ω. –¥–∏—Å–ø–µ—Ä—Å–∏–∏)",
                            "Adjusted R¬≤"],
                "–ó–Ω–∞—á–µ–Ω–∏–µ": [format_number(mse), format_number(rmse),
                             format_number(mae), f"{r2:.4f}", f"{adj_r2:.4f}"]
            }
            metrics_df = pd.DataFrame(metrics_data)
            st.table(metrics_df)

            # –í—ã–≤–æ–¥ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è GridSearchCV
            if model_type in ["–°–ª—É—á–∞–π–Ω—ã–π –ª–µ—Å", "SVR"]:
                st.write("–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:", model.best_params_)

            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π")
            fig, ax = plt.subplots(figsize=(10, 6))
            x_plot = X_test.iloc[:, 0] if len(X.columns) > 1 else X_test
            ax.scatter(x_plot, y_test, color="blue", label="–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            ax.scatter(x_plot, y_pred, color="red", alpha=0.5, label="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            ax.set_xlabel(X.columns[0] if len(X.columns) > 1 else features_to_use[0])
            ax.set_ylabel("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ª—É—á–∞–∏")
            ax.set_title(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ ({model_type})")
            ax.legend()
            st.pyplot(fig)

            st.subheader("–ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤")
            residuals = y_test - y_pred
            fig, ax = plt.subplots(1, 2, figsize=(16, 6))
            sns.histplot(residuals, kde=True, ax=ax[0])
            ax[0].set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤")
            ax[0].set_xlabel("–û—à–∏–±–∫–∞ (–§–∞–∫—Ç - –ü—Ä–æ–≥–Ω–æ–∑)")
            sns.scatterplot(x=y_pred, y=residuals, ax=ax[1], alpha=0.7)
            ax[1].axhline(y=0, color='r', linestyle='--')
            ax[1].set_title("–û—Å—Ç–∞—Ç–∫–∏ vs –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
            ax[1].set_xlabel("–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            ax[1].set_ylabel("–û—Å—Ç–∞—Ç–∫–∏")
            st.pyplot(fig)

# --- –î–∞–Ω–Ω—ã–µ raw ---
st.markdown("---")
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ") and not df.empty:
    st.subheader("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df)

# --- –ü–æ–¥–≤–∞–ª ---
st.markdown("---")
st.markdown("¬© 2025 | –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ COVID-19 –≤ –†–æ—Å—Å–∏–∏ | Streamlit App")
